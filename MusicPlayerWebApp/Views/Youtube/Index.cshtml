@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";  // Specifies the layout page
}

<h2>YouTube Video Fetcher</h2>
<form method="post" action="/YouTube/Fetch">
    <label for="videoQuery">Enter YouTube URL or search terms:</label>
    <input type="text" id="videoQuery" name="videoQuery" required>
    <button type="submit">Fetch Video</button>
</form>

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <p>@ViewBag.Message</p>
}

@if (ViewBag.Title != null)
{
    <div>
        <h3 class="video-title"><a href="@ViewBag.VideoUrl" target="_blank">@ViewBag.Title</a></h3>
        <!-- <a href="@ViewBag.VideoUrl" target="_blank"><img src="@ViewBag.ThumbnailUrl" alt="Video Thumbnail" class="video-thumbnail"></a> -->
        <div id="player"></div>
        <script>
            console.log("Creating YouTube API script tag");
            var tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            console.log("YouTube API script tag inserted");

            var player;
            window.onYouTubeIframeAPIReady = function() {
                console.log("Video ID from ViewBag:", '@ViewBag.VideoId');
                player = new YT.Player('player', {
                    height: '360',
                    width: '640',
                    videoId: '@ViewBag.VideoId',
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
                console.log("YouTube player initialized");
            }

            function onPlayerReady(event) {
                console.log("Player Ready");
                event.target.playVideo();
            }

            function onPlayerStateChange(event) {
                console.log("Player State Changed", event.data);
                if (event.data == YT.PlayerState.PLAYING) {
                }
            }
        </script>
        <div id="videoSliderContainer">
            <div id="videoSlider"></div>
            <p>Start: <span id="startLabel">0:00</span> | End: <span id="endLabel">0:00</span></p>
        </div>
        <p class="video-description">@ViewBag.Description</p>
        <button class="btn btn-primary toggle-description">Show More</button>
        <p>Views: @ViewBag.Views | Posted: @ViewBag.PublishedAt</p>
        <h4>Channel: <a href="@ViewBag.ChannelUrl" target="_blank">@ViewBag.ChannelTitle</a></h4>
        <img src="@ViewBag.ChannelIcon" alt="Channel Icon" style="width: 50px; height: 50px;">
        <p>Subscribers: @ViewBag.Subscribers</p>
    </div>
}

@section Scripts {
    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        var player;

        $(document).ready(function () {
            $("#videoSlider").slider({
                range: true,
                min: 0,
                max: 100, // This will be updated dynamically
                values: [0, 100],
                slide: function (event, ui) {
                    $('#startLabel').text(formatTime(ui.values[0]));
                    $('#endLabel').text(formatTime(ui.values[1]));

                    var currentTime = player.getCurrentTime();

                    if (ui.handleIndex === 0) {
                        if (currentTime < ui.values[0]) {
                            player.seekTo(ui.values[0], true);
                        }
                    } else if (ui.handleIndex === 1) {
                        if (currentTime > ui.values[1]) {
                            player.seekTo(ui.values[0], true);
                        }
                    }
                }
            });

            function initializeSliders() {
                var duration = player.getDuration();
                $("#videoSlider").slider("option", "max", duration);
                $("#videoSlider").slider("option", "values", [0, duration]);
                updateLabels();
            }

            function updateLabels() {
                var values = $("#videoSlider").slider("values");
                $('#startLabel').text(formatTime(values[0]));
                $('#endLabel').text(formatTime(values[1]));
            }

            function formatTime(seconds) {
                var mins = Math.floor(seconds / 60);
                var secs = Math.floor(seconds % 60);
                return mins + ':' + (secs < 10 ? '0' : '') + secs;
            }

            const toggleButton = $('.toggle-description');
            const description = $('.video-description');

            toggleButton.on('click', function () {
                let isCollapsed = description.css('display') !== 'block';
                if (isCollapsed) {
                    description.css({
                        display: 'block',
                        maxHeight: 'none',
                        overflow: 'visible'
                    });
                    toggleButton.text('Show Less');
                } else {
                    description.css({
                        display: '-webkit-box',
                        maxHeight: '4.5em',
                        overflow: 'hidden'
                    });
                    toggleButton.text('Show More');
                }
            });
        });

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '360',
                width: '640',
                videoId: '@ViewBag.VideoId',
                events: {
                    'onReady': function (event) {
                        initializeSliders();
                        event.target.playVideo();
                    },
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING) {
                startMonitoring();
            }
        }

        var monitorInterval;
        function startMonitoring() {
            if (monitorInterval) {
                clearInterval(monitorInterval);
            }
            monitorInterval = setInterval(function () {
                var currentTime = player.getCurrentTime();
                var endTime = $("#videoSlider").slider("values")[1];
                if (currentTime >= endTime) {
                    player.seekTo($("#videoSlider").slider("values")[0], true);
                }
            }, 1000);
        }

        function stopMonitoring() {
            if (monitorInterval) {
                clearInterval(monitorInterval);
            }
        }
    </script>
}

@section Styles {
    <style>
        .video-title {
            font-size: 20px;
        }

        .video-thumbnail {
            width: 100%;
            max-width: 640px;
            height: auto;
            object-fit: cover;
        }

        .video-description {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 4.5em; /* Adjust this value based on font-size and line-height */
        }

        #videoSlider .ui-slider-range {
            background-color: darkgray; /* Darker grey for the range background */
        }

        #videoSlider .ui-slider-handle {
            border-radius: 50%; /* Makes the handles circular */
            background: red; /* Red color for visibility */
            width: 20px; /* Width of the handle */
            height: 20px; /* Height of the handle */
            top: -6px; /* Adjust top position to align it center to the slider bar */
        }

        #videoSlider {
            height: 0.8em; /* Height of the slider bar */
            background: #CCC; /* Lighter grey background for the slider bar */
        }

    </style>
}